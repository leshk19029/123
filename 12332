-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HTTPService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- NovaUI Library
local NovaUI = {}

function NovaUI:CreateAnimation(Object, Properties, Callback)
	local Tween = TweenService:Create(Object, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), Properties)
	Tween.Completed:Connect(Callback or function() end)
	Tween:Play()
end

function NovaUI:SetupConfig(DefaultSettings, UserSettings)
	UserSettings = UserSettings or {}
	
	for Setting, Value in pairs(DefaultSettings) do
		if UserSettings[Setting] == nil and UserSettings[Setting] ~= false then
			UserSettings[Setting] = Value
		end
	end
	
	return UserSettings
end

function NovaUI:CreateInterface(Config)
	Config = NovaUI:SetupConfig({
		Title = "NovaUI Interface"
	}, Config)
	
	local Interface = {
		CurrentSection = nil
	}
	
	-- Main Interface Container
	Interface.MainFrame = Instance.new("ScreenGui", (RunService:IsStudio() and Players.LocalPlayer:WaitForChild("PlayerGui") or CoreGui))
	Interface.MainFrame.Name = "NovaUI"
	Interface.MainFrame.IgnoreGuiInset = true
	
	Interface.ScaleHandler = Instance.new("UIScale", Interface.MainFrame)
	
	-- Primary Window
	Interface.Window = Instance.new("Frame", Interface.MainFrame)
	Interface.Window.BorderSizePixel = 0
	Interface.Window.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
	Interface.Window.AnchorPoint = Vector2.new(0.5, 0.5)
	Interface.Window.Size = UDim2.new(0, 550, 0, 400)
	Interface.Window.Position = UDim2.new(0.5, 0, 0.5, 0)
	Interface.Window.Name = "PrimaryWindow"
	
	Interface.WindowCorner = Instance.new("UICorner", Interface.Window)
	
	-- Shadow Effect
	Interface.ShadowContainer = Instance.new("Frame", Interface.Window)
	Interface.ShadowContainer.ZIndex = 0
	Interface.ShadowContainer.BorderSizePixel = 0
	Interface.ShadowContainer.Size = UDim2.new(1, 0, 1, 0)
	Interface.ShadowContainer.Name = "ShadowFrame"
	Interface.ShadowContainer.BackgroundTransparency = 1
	
	Interface.Shadow = Instance.new("ImageLabel", Interface.ShadowContainer)
	Interface.Shadow.ZIndex = 0
	Interface.Shadow.BorderSizePixel = 0
	Interface.Shadow.SliceCenter = Rect.new(49, 49, 450, 450)
	Interface.Shadow.ScaleType = Enum.ScaleType.Slice
	Interface.Shadow.ImageTransparency = 0.5
	Interface.Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
	Interface.Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
	Interface.Shadow.Image = "rbxassetid://6014261993"
	Interface.Shadow.Size = UDim2.new(1, 47, 1, 47)
	Interface.Shadow.BackgroundTransparency = 1
	Interface.Shadow.Name = "WindowShadow"
	Interface.Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
	
	-- Header Bar
	Interface.Header = Instance.new("Frame", Interface.Window)
	Interface.Header.BorderSizePixel = 0
	Interface.Header.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Interface.Header.Size = UDim2.new(1, 0, 0, 40)
	Interface.Header.Name = "HeaderBar"
	
	Interface.HeaderDivider = Instance.new("Frame", Interface.Header)
	Interface.HeaderDivider.ZIndex = 2
	Interface.HeaderDivider.BorderSizePixel = 0
	Interface.HeaderDivider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.HeaderDivider.AnchorPoint = Vector2.new(0, 1)
	Interface.HeaderDivider.Size = UDim2.new(1, 0, 0, 1)
	Interface.HeaderDivider.Position = UDim2.new(0, 0, 1, 0)
	Interface.HeaderDivider.Name = "HeaderLine"
	Interface.HeaderDivider.BackgroundTransparency = 0.95
	
	Interface.Title = Instance.new("TextLabel", Interface.Header)
	Interface.Title.BorderSizePixel = 0
	Interface.Title.TextXAlignment = Enum.TextXAlignment.Left
	Interface.Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.Title.TextSize = 18
	Interface.Title.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
	Interface.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Interface.Title.BackgroundTransparency = 1
	Interface.Title.Size = UDim2.new(1, 0, 1, 0)
	Interface.Title.Text = Config.Title
	Interface.Title.Name = "WindowTitle"
	
	Interface.TitlePadding = Instance.new("UIPadding", Interface.Title)
	Interface.TitlePadding.PaddingLeft = UDim.new(0, 14)
	
	Interface.CloseButton = Instance.new("ImageLabel", Interface.Header)
	Interface.CloseButton.BorderSizePixel = 0
	Interface.CloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.CloseButton.AnchorPoint = Vector2.new(1, 0)
	Interface.CloseButton.Image = "rbxassetid://10747384394"
	Interface.CloseButton.Size = UDim2.new(0, 20, 0, 20)
	Interface.CloseButton.BackgroundTransparency = 1
	Interface.CloseButton.Name = "CloseButton"
	Interface.CloseButton.Position = UDim2.new(1, -8, 0, 10)
	
	Interface.MinimizeButton = Instance.new("ImageLabel", Interface.Header)
	Interface.MinimizeButton.BorderSizePixel = 0
	Interface.MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.MinimizeButton.AnchorPoint = Vector2.new(1, 0)
	Interface.MinimizeButton.Image = "rbxassetid://10734896206"
	Interface.MinimizeButton.Size = UDim2.new(0, 20, 0, 20)
	Interface.MinimizeButton.BackgroundTransparency = 1
	Interface.MinimizeButton.Name = "MinimizeButton"
	Interface.MinimizeButton.Position = UDim2.new(1, -33, 0, 10)
	
	Interface.HeaderCorner = Instance.new("UICorner", Interface.Header)
	
	Interface.HeaderExtension = Instance.new("Frame", Interface.Header)
	Interface.HeaderExtension.BorderSizePixel = 0
	Interface.HeaderExtension.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Interface.HeaderExtension.AnchorPoint = Vector2.new(0, 1)
	Interface.HeaderExtension.Size = UDim2.new(1, 0, 0.25, 0)
	Interface.HeaderExtension.Position = UDim2.new(0, 0, 1, 0)
	Interface.HeaderExtension.Name = "HeaderExtension"
	
	-- Content Area
	Interface.ContentArea = Instance.new("Frame", Interface.Window)
	Interface.ContentArea.BorderSizePixel = 0
	Interface.ContentArea.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.ContentArea.AnchorPoint = Vector2.new(1, 0)
	Interface.ContentArea.Size = UDim2.new(1, -180, 1, -40)
	Interface.ContentArea.Position = UDim2.new(1, 0, 0, 40)
	Interface.ContentArea.Name = "ContentArea"
	Interface.ContentArea.BackgroundTransparency = 1
	
	-- Navigation Panel
	Interface.Navigation = Instance.new("Frame", Interface.Window)
	Interface.Navigation.BorderSizePixel = 0
	Interface.Navigation.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Interface.Navigation.Size = UDim2.new(0, 180, 1, -41)
	Interface.Navigation.Position = UDim2.new(0, 0, 0, 40)
	Interface.Navigation.Name = "NavigationPanel"
	
	Interface.NavigationCorner = Instance.new("UICorner", Interface.Navigation)
	
	Interface.NavTopCover = Instance.new("Frame", Interface.Navigation)
	Interface.NavTopCover.BorderSizePixel = 0
	Interface.NavTopCover.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Interface.NavTopCover.Size = UDim2.new(1, 0, 0, 20)
	Interface.NavTopCover.Name = "NavTopCover"
	
	Interface.NavBottomCover = Instance.new("Frame", Interface.Navigation)
	Interface.NavBottomCover.BorderSizePixel = 0
	Interface.NavBottomCover.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Interface.NavBottomCover.AnchorPoint = Vector2.new(0, 1)
	Interface.NavBottomCover.Size = UDim2.new(1, 0, 0, 20)
	Interface.NavBottomCover.Position = UDim2.new(0, 0, 1, 0)
	Interface.NavBottomCover.Name = "NavBottomCover"
	
	Interface.NavBorder = Instance.new("Frame", Interface.Navigation)
	Interface.NavBorder.ZIndex = 2
	Interface.NavBorder.BorderSizePixel = 0
	Interface.NavBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.NavBorder.AnchorPoint = Vector2.new(1, 0)
	Interface.NavBorder.Size = UDim2.new(0, 1, 1, 0)
	Interface.NavBorder.Position = UDim2.new(1, 0, 0, 0)
	Interface.NavBorder.Name = "NavBorder"
	Interface.NavBorder.BackgroundTransparency = 0.95
	
	Interface.NavContainer = Instance.new("Frame", Interface.Navigation)
	Interface.NavContainer.BorderSizePixel = 0
	Interface.NavContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.NavContainer.Size = UDim2.new(1, 0, 1, 0)
	Interface.NavContainer.Name = "NavContainer"
	Interface.NavContainer.BackgroundTransparency = 1
	
	Interface.NavPadding = Instance.new("UIPadding", Interface.NavContainer)
	Interface.NavPadding.PaddingTop = UDim.new(0, 8)
	Interface.NavPadding.PaddingRight = UDim.new(0, 10)
	Interface.NavPadding.PaddingLeft = UDim.new(0, 10)
	Interface.NavPadding.PaddingBottom = UDim.new(0, 8)
	
	Interface.NavLayout = Instance.new("UIListLayout", Interface.NavContainer)
	Interface.NavLayout.Padding = UDim.new(0, 7)
	Interface.NavLayout.SortOrder = Enum.SortOrder.LayoutOrder
	
	-- Alert System
	Interface.AlertSystem = Instance.new("Frame", Interface.MainFrame)
	Interface.AlertSystem.BorderSizePixel = 0
	Interface.AlertSystem.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Interface.AlertSystem.AnchorPoint = Vector2.new(1, 0)
	Interface.AlertSystem.Size = UDim2.new(0, 300, 1, -10)
	Interface.AlertSystem.Position = UDim2.new(1, 0, 0, 0)
	Interface.AlertSystem.Name = "AlertSystem"
	Interface.AlertSystem.BackgroundTransparency = 1
	
	Interface.AlertLayout = Instance.new("UIListLayout", Interface.AlertSystem)
	Interface.AlertLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	Interface.AlertLayout.Padding = UDim.new(0, 10)
	Interface.AlertLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
	Interface.AlertLayout.SortOrder = Enum.SortOrder.LayoutOrder
	
	-- Close Button Functionality
	Interface.CloseButton.InputBegan:Connect(function(Input, GPE)
		if GPE then return end
		
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			Interface:CloseInterface()
		end
	end)
	
	-- Window Dragging
	local DragTarget = Interface.Header
	local IsDragging = false
	local DragInput = nil
	local DragStartPosition = nil
	local StartWindowPosition = nil
	
	function Interface:UpdateWindowPosition(Input)
		local Delta = Input.Position - DragStartPosition
		DragTarget.Parent.Position = UDim2.new(
			StartWindowPosition.X.Scale, 
			StartWindowPosition.X.Offset + Delta.X, 
			StartWindowPosition.Y.Scale, 
			StartWindowPosition.Y.Offset + Delta.Y
		)
	end
	
	DragTarget.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
			IsDragging = true
			DragStartPosition = Input.Position
			StartWindowPosition = DragTarget.Parent.Position
			
			Input.Changed:Connect(function()
				if Input.UserInputState == Enum.UserInputState.End then
					IsDragging = false
				end
			end)
		end
	end)
	
	DragTarget.InputChanged:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
			DragInput = Input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(Input)
		if Input == DragInput and IsDragging then
			Interface:UpdateWindowPosition(Input)
		end
	end)
	
	-- Alert Function
	function Interface:ShowAlert(AlertConfig)
		AlertConfig = NovaUI:SetupConfig({
			Header = "Alert",
			Message = "This is an example alert!",
			ActionButton = {
				Label = "Confirm",
				Function = function() end,
			}
		}, AlertConfig)
		
		local Alert = {
			IsHovered = false,
			IsPressed = false
		}
		
		-- Alert Container
		Alert.Container = Instance.new("Frame", Interface.AlertSystem)
		Alert.Container.BorderSizePixel = 0
		Alert.Container.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
		Alert.Container.AnchorPoint = Vector2.new(1, 1)
		Alert.Container.Size = UDim2.new(0, 279, 0, 155)
		Alert.Container.Position = UDim2.new(1, -10, 1, -10)
		Alert.Container.Name = "AlertBox"
		
		Alert.Corner = Instance.new("UICorner", Alert.Container)
		
		Alert.ScaleHandler = Instance.new("UIScale", Alert.Container)
		Alert.ScaleHandler.Scale = 0.5
		
		Alert.Border = Instance.new("UIStroke", Alert.Container)
		Alert.Border.Transparency = 0.9
		Alert.Border.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Alert.Border.Color = Color3.fromRGB(255, 255, 255)
		
		-- Action Button
		Alert.ActionBtn = Instance.new("TextLabel", Alert.Container)
		Alert.ActionBtn.BorderSizePixel = 0
		Alert.ActionBtn.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
		Alert.ActionBtn.TextSize = 16
		Alert.ActionBtn.TextTransparency = 0.2
		Alert.ActionBtn.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
		Alert.ActionBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
		Alert.ActionBtn.AnchorPoint = Vector2.new(0, 1)
		Alert.ActionBtn.Size = UDim2.new(1, -20, 0, 35)
		Alert.ActionBtn.Text = AlertConfig.ActionButton.Label
		Alert.ActionBtn.Name = "ActionButton"
		Alert.ActionBtn.Position = UDim2.new(0, 10, 1.008, -10)
		Alert.ActionBtn.Visible = false
		Alert.ActionBtn.ZIndex = 10
		
		Alert.ButtonCorner = Instance.new("UICorner", Alert.ActionBtn)
		Alert.ButtonCorner.CornerRadius = UDim.new(0, 5)
		
		Alert.ButtonBorder = Instance.new("UIStroke", Alert.ActionBtn)
		Alert.ButtonBorder.Transparency = 0.96
		Alert.ButtonBorder.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Alert.ButtonBorder.Color = Color3.fromRGB(255, 255, 255)
		
		-- Alert Header
		Alert.Header = Instance.new("Frame", Alert.Container)
		Alert.Header.BorderSizePixel = 0
		Alert.Header.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		Alert.Header.Size = UDim2.new(1, 0, -0.06107, 40)
		Alert.Header.Name = "AlertHeader"
		
		Alert.HeaderLine = Instance.new("Frame", Alert.Header)
		Alert.HeaderLine.ZIndex = 2
		Alert.HeaderLine.BorderSizePixel = 0
		Alert.HeaderLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Alert.HeaderLine.AnchorPoint = Vector2.new(0, 1)
		Alert.HeaderLine.Size = UDim2.new(1, 0, 0, 1)
		Alert.HeaderLine.Position = UDim2.new(0, 0, 1, 0)
		Alert.HeaderLine.Name = "HeaderDivider"
		Alert.HeaderLine.BackgroundTransparency = 0.95
		
		Alert.HeaderTitle = Instance.new("TextLabel", Alert.Header)
		Alert.HeaderTitle.BorderSizePixel = 0
		Alert.HeaderTitle.TextXAlignment = Enum.TextXAlignment.Left
		Alert.HeaderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Alert.HeaderTitle.TextSize = 18
		Alert.HeaderTitle.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
		Alert.HeaderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
		Alert.HeaderTitle.BackgroundTransparency = 1
		Alert.HeaderTitle.Size = UDim2.new(1, 0, 1, 0)
		Alert.HeaderTitle.Text = AlertConfig.Header
		Alert.HeaderTitle.Name = "AlertTitle"
		
		Alert.TitlePadding = Instance.new("UIPadding", Alert.HeaderTitle)
		Alert.TitlePadding.PaddingLeft = UDim.new(0, 10)
		
		Alert.HeaderCorner = Instance.new("UICorner", Alert.Header)
		
		Alert.HeaderExtension = Instance.new("Frame", Alert.Header)
		Alert.HeaderExtension.BorderSizePixel = 0
		Alert.HeaderExtension.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		Alert.HeaderExtension.AnchorPoint = Vector2.new(0, 1)
		Alert.HeaderExtension.Size = UDim2.new(1, 0, 0.25, 0)
		Alert.HeaderExtension.Position = UDim2.new(0, 0, 1, 0)
		Alert.HeaderExtension.Name = "HeaderExtension"
		
		Alert.CloseBtn = Instance.new("ImageLabel", Alert.Header)
		Alert.CloseBtn.BorderSizePixel = 0
		Alert.CloseBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Alert.CloseBtn.AnchorPoint = Vector2.new(1, 0)
		Alert.CloseBtn.Image = "rbxassetid://10747384394"
		Alert.CloseBtn.Size = UDim2.new(0, 20, 0, 20)
		Alert.CloseBtn.BackgroundTransparency = 1
		Alert.CloseBtn.Name = "AlertClose"
		Alert.CloseBtn.Position = UDim2.new(1, -8, 0, 5)
		Alert.CloseBtn.ZIndex = 10
		
		-- Alert Message
		Alert.Message = Instance.new("TextLabel", Alert.Container)
		Alert.Message.TextWrapped = true
		Alert.Message.BorderSizePixel = 0
		Alert.Message.TextXAlignment = Enum.TextXAlignment.Left
		Alert.Message.TextYAlignment = Enum.TextYAlignment.Top
		Alert.Message.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Alert.Message.TextSize = 18
		Alert.Message.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
		Alert.Message.TextColor3 = Color3.fromRGB(255, 255, 255)
		Alert.Message.BackgroundTransparency = 1
		Alert.Message.AnchorPoint = Vector2.new(0.5, 0.5)
		Alert.Message.Size = UDim2.new(1, -20, 0.427, 0)
		Alert.Message.Text = AlertConfig.Message
		Alert.Message.Name = "AlertMessage"
		Alert.Message.Position = UDim2.new(0.5, 0, 0.44877, 0)
		
		Alert.BackgroundButton = Instance.new("ImageButton", Alert.Container)
		Alert.BackgroundButton.BorderSizePixel = 0
		Alert.BackgroundButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Alert.BackgroundButton.Size = UDim2.new(1, 0, 1, 0)
		Alert.BackgroundButton.BackgroundTransparency = 1
		
		NovaUI:CreateAnimation(Alert.ScaleHandler, {Scale = 1})
		
		function Alert:RemoveAlert()
			NovaUI:CreateAnimation(Alert.ScaleHandler, {Scale = 0.8})
			wait(0.1)
			Alert.Container:Destroy()
		end
		
		Alert.CloseBtn.InputBegan:Connect(function(Input, GPE)
			if GPE then return end
			
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Alert.IsPressed = true
				Alert:RemoveAlert()
			end
		end)
		
		if AlertConfig.ActionButton == false then
			Alert.Message.Size = UDim2.new(1, -20, 0.71, 0)
			Alert.Message.Position = UDim2.new(0.5, 0, 0.63, 0)
			Alert.ActionBtn.Visible = false
		else
			Alert.ActionBtn.Visible = true
			Alert.ActionBtn.Text = AlertConfig.ActionButton.Label
			
			Alert.ActionBtn.MouseEnter:Connect(function()
				Alert.IsHovered = true
				NovaUI:CreateAnimation(Alert.ActionBtn, {TextTransparency = 0})
				NovaUI:CreateAnimation(Alert.ButtonBorder, {Transparency = 0.9})
			end)
			
			Alert.ActionBtn.MouseLeave:Connect(function()
				Alert.IsHovered = false
				
				if not Alert.IsPressed then
					NovaUI:CreateAnimation(Alert.ActionBtn, {TextTransparency = 0.2})
					NovaUI:CreateAnimation(Alert.ButtonBorder, {Transparency = 0.96})
				end
			end)
			
			Alert.ActionBtn.InputBegan:Connect(function(Input, GPE)
				if GPE then return end
				
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and Alert.IsHovered then
					Alert.IsPressed = true
					NovaUI:CreateAnimation(Alert.ActionBtn, {BackgroundColor3 = Color3.fromRGB(32, 32, 32)})
					NovaUI:CreateAnimation(Alert.ButtonBorder, {Transparency = 0.85})
					AlertConfig.ActionButton.Function()
				end
			end)
			
			Alert.ActionBtn.InputEnded:Connect(function(Input, GPE)
				if GPE then return end
				
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					Alert.IsPressed = false
					
					if Alert.IsHovered then
						NovaUI:CreateAnimation(Alert.ActionBtn, {TextTransparency = 0})
						NovaUI:CreateAnimation(Alert.ButtonBorder, {Transparency = 0.9})
					else
						NovaUI:CreateAnimation(Alert.ActionBtn, {BackgroundColor3 = Color3.fromRGB(29, 29, 29)})
						NovaUI:CreateAnimation(Alert.ActionBtn, {TextTransparency = 0.2})
						NovaUI:CreateAnimation(Alert.ButtonBorder, {Transparency = 0.96})
					end
				end
			end)
		end
		
		return Alert
	end
	
	-- Section Creation
	function Interface:AddSection(SectionConfig)
		SectionConfig = NovaUI:SetupConfig({
			Label = "Section",
			Image = "rbxassetid://10723407389"
		}, SectionConfig)
		
		local Section = {
			IsHovered = false,
			IsActive = false
		}
		
		-- Navigation Item
		Section.NavItem = Instance.new("TextLabel", Interface.NavContainer)
		Section.NavItem.BorderSizePixel = 0
		Section.NavItem.TextXAlignment = Enum.TextXAlignment.Left
		Section.NavItem.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
		Section.NavItem.TextSize = 16
		Section.NavItem.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
		Section.NavItem.TextColor3 = Color3.fromRGB(255, 255, 255)
		Section.NavItem.BackgroundTransparency = 1
		Section.NavItem.Size = UDim2.new(1, 0, 0, 35)
		Section.NavItem.Text = SectionConfig.Label
		Section.NavItem.TextTransparency = 0.4
		Section.NavItem.Name = "SectionNav"
		
		Section.NavPadding = Instance.new("UIPadding", Section.NavItem)
		Section.NavPadding.PaddingTop = UDim.new(0, 8)
		Section.NavPadding.PaddingLeft = UDim.new(0, 35)
		Section.NavPadding.PaddingBottom = UDim.new(0, 8)
		
		Section.NavIcon = Instance.new("ImageLabel", Section.NavItem)
		Section.NavIcon.BorderSizePixel = 0
		Section.NavIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Section.NavIcon.Image = SectionConfig.Image
		Section.NavIcon.ImageTransparency = 0.4
		Section.NavIcon.Size = UDim2.new(0, 18, 0, 18)
		Section.NavIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Section.NavIcon.BackgroundTransparency = 1
		Section.NavIcon.Name = "SectionIcon"
		Section.NavIcon.Position = UDim2.new(0, -25, 0, 0)
		
		Section.NavBorder = Instance.new("UIStroke", Section.NavItem)
		Section.NavBorder.Enabled = false
		Section.NavBorder.Transparency = 0.96
		Section.NavBorder.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		Section.NavBorder.Color = Color3.fromRGB(255, 255, 255)
		
		Section.NavCorner = Instance.new("UICorner", Section.NavItem)
		Section.NavCorner.CornerRadius = UDim.new(0, 5)
		
		-- Content Frame
		Section.ContentFrame = Instance.new("ScrollingFrame", Interface.ContentArea)
		Section.ContentFrame.Active = true
		Section.ContentFrame.BorderSizePixel = 0
		Section.ContentFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Section.ContentFrame.Name = SectionConfig.Label
		Section.ContentFrame.ScrollBarImageTransparency = 0.9
		Section.ContentFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		Section.ContentFrame.Size = UDim2.new(1, 0, 1, 0)
		Section.ContentFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
		Section.ContentFrame.ScrollBarThickness = 4
		Section.ContentFrame.BackgroundTransparency = 1
		Section.ContentFrame.Visible = false
		
		Section.ContentPadding = Instance.new("UIPadding", Section.ContentFrame)
		Section.ContentPadding.PaddingTop = UDim.new(0, 10)
		Section.ContentPadding.PaddingRight = UDim.new(0, 12)
		Section.ContentPadding.PaddingLeft = UDim.new(0, 10)
		Section.ContentPadding.PaddingBottom = UDim.new(0, 10)
		
		Section.ContentLayout = Instance.new("UIListLayout", Section.ContentFrame)
		Section.ContentLayout.Padding = UDim.new(0, 10)
		Section.ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
		
		function Section:ActivateSection()
			if not Section.IsActive then
				if Interface.CurrentSection ~= nil then
					Interface.CurrentSection:DeactivateSection()
				end
				
				Section.IsActive = true
				NovaUI:CreateAnimation(Section.NavItem, {TextTransparency = 0})
				NovaUI:CreateAnimation(Section.NavIcon, {ImageTransparency = 0})
				NovaUI:CreateAnimation(Section.NavItem, {BackgroundTransparency = 0})
				NovaUI:CreateAnimation(Section.NavBorder, {Enabled = true})
				Section.ContentFrame.Visible = true
				
				Interface.CurrentSection = Section
			end
		end
		
		function Section:DeactivateSection()
			if Section.IsActive then
				Section.IsActive = false
				Section.IsHovered = false
				NovaUI:CreateAnimation(Section.NavItem, {TextTransparency = 0.4})
				NovaUI:CreateAnimation(Section.NavIcon, {ImageTransparency = 0.4})
				NovaUI:CreateAnimation(Section.NavItem, {BackgroundTransparency = 1})
				NovaUI:CreateAnimation(Section.NavBorder, {Enabled = false})
				Section.ContentFrame.Visible = false
			end
		end
		
		Section.NavItem.MouseEnter:Connect(function()
			Section.IsHovered = true
			
			if not Section.IsActive then
				NovaUI:CreateAnimation(Section.NavItem, {TextTransparency = 0})
				NovaUI:CreateAnimation(Section.NavIcon, {ImageTransparency = 0})
			end
		end)
		
		Section.NavItem.MouseLeave:Connect(function()
			Section.IsHovered = false
			
			if not Section.IsActive then
				NovaUI:CreateAnimation(Section.NavItem, {TextTransparency = 0.4})
				NovaUI:CreateAnimation(Section.NavIcon, {ImageTransparency = 0.4})
			end
		end)
		
		UserInputService.InputBegan:Connect(function(Input, GPE)
			if GPE then return end
			
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				if Section.IsHovered then
					Section:ActivateSection()
				end
			end
		end)
		
		if Interface.CurrentSection == nil then
			Section:ActivateSection()
		end
		
		-- Text Display Element
		function Section:AddTextDisplay(TextConfig)
			TextConfig = NovaUI:SetupConfig({
				Content = "Text Display",
				DisplayType = "Normal"
			}, TextConfig)
			
			local TextElement = {
				IsHovered = false
			}
			
			if TextConfig.DisplayType == "Normal" then
				TextElement.Frame = Instance.new("Frame", Section.ContentFrame)
				TextElement.Frame.BorderSizePixel = 0
				TextElement.Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
				TextElement.Frame.Size = UDim2.new(1, 0, 0, 35)
				TextElement.Frame.Name = "TextDisplay"
				
				TextElement.Border = Instance.new("UIStroke", TextElement.Frame)
				TextElement.Border.Transparency = 0.96
				TextElement.Border.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				TextElement.Border.Color = Color3.fromRGB(255, 255, 255)
				
				TextElement.Padding = Instance.new("UIPadding", TextElement.Frame)
				TextElement.Padding.PaddingTop = UDim.new(0, 8)
				TextElement.Padding.PaddingLeft = UDim.new(0, 12)
				TextElement.Padding.PaddingBottom = UDim.new(0, 8)
				
				TextElement.Corner = Instance.new("UICorner", TextElement.Frame)
				TextElement.Corner.CornerRadius = UDim.new(0, 5)
				
				TextElement.TextLabel = Instance.new("TextLabel", TextElement.Frame)
				TextElement.TextLabel.BorderSizePixel = 0
				TextElement.TextLabel.TextXAlignment = Enum.TextXAlignment.Left
				TextElement.TextLabel.TextTransparency = 0.2
				TextElement.TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextElement.TextLabel.TextSize = 18
				TextElement.TextLabel.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
				TextElement.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextElement.TextLabel.BackgroundTransparency = 1
				TextElement.TextLabel.Size = UDim2.new(0.85, 0, 1, 0)
				TextElement.TextLabel.TextYAlignment = Enum.TextYAlignment.Top
				TextElement.TextLabel.TextWrapped = true
				TextElement.TextLabel.Name = "DisplayText"
				
				TextElement.Icon = Instance.new("ImageLabel", TextElement.Frame)
				TextElement.Icon.BorderSizePixel = 0
				TextElement.Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextElement.Icon.ImageTransparency = 0.3
				TextElement.Icon.AnchorPoint = Vector2.new(1, 0)
				TextElement.Icon.Image = "rbxassetid://18824545160"
				TextElement.Icon.Size = UDim2.new(0, 22, 0, 22)
				TextElement.Icon.BackgroundTransparency = 1
				TextElement.Icon.Name = "TextIcon"
				TextElement.Icon.Position = UDim2.new(1, -10, 0, -1)
				
				function TextElement:UpdateContent(NewText)
					TextConfig.Content = NewText
					TextElement:RefreshDisplay()
				end
				
				function TextElement:GetContent()
					return TextConfig.Content
				end
				
				function TextElement:RefreshDisplay()
					TextElement.TextLabel.Text = TextConfig.Content
					TextElement.TextLabel.Size = UDim2.new(TextElement.TextLabel.Size.X.Scale, TextElement.TextLabel.Size.X.Offset, 0, math.huge)
					TextElement.TextLabel.Size = UDim2.new(TextElement.TextLabel.Size.X.Scale, TextElement.TextLabel.Size.X.Offset, 0, TextElement.TextLabel.TextBounds.Y)
					TextElement.Frame.Size = UDim2.new(TextElement.Frame.Size.X.Scale, TextElement.Frame.Size.X.Offset, 0, TextElement.TextLabel.TextBounds.Y + 18)
				end
				
				TextElement.Frame.MouseEnter:Connect(function()
					TextElement.IsHovered = true
					NovaUI:CreateAnimation(TextElement.Icon, {ImageTransparency = 0})
					NovaUI:CreateAnimation(TextElement.TextLabel, {TextTransparency = 0})
					NovaUI:CreateAnimation(TextElement.Border, {Transparency = 0.9})
				end)
				
				TextElement.Frame.MouseLeave:Connect(function()
					TextElement.IsHovered = false
					
					if not TextElement.IsPressed then
						NovaUI:CreateAnimation(TextElement.Icon, {ImageTransparency = 0.3})
						NovaUI:CreateAnimation(TextElement.TextLabel, {TextTransparency = 0.2})
						NovaUI:CreateAnimation(TextElement.Border, {Transparency = 0.96})
					end
				end)
				
				TextElement:UpdateContent(TextConfig.Content)
				
			elseif TextConfig.DisplayType == "Information" then
				-- Info style implementation (similar structure)
				-- ... (implementation for other text types)
			end
			
			return TextElement
		end
		
		-- Action Button Element
		function Section:AddActionButton(ButtonConfig)
			ButtonConfig = NovaUI:SetupConfig({
				Label = "Action Button",
				ClickFunction = function()
					print("Button clicked!")
				end,
			}, ButtonConfig)
			
			local ActionButton = {
				IsHovered = false,
				IsPressed = false
			}
			
			ActionButton.Frame = Instance.new("Frame", Section.ContentFrame)
			ActionButton.Frame.BorderSizePixel = 0
			ActionButton.Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			ActionButton.Frame.Size = UDim2.new(1, 0, 0, 45)
			ActionButton.Frame.Name = "ActionButton"
			
			ActionButton.Border = Instance.new("UIStroke", ActionButton.Frame)
			ActionButton.Border.Transparency = 0.96
			ActionButton.Border.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
			ActionButton.Border.Color = Color3.fromRGB(255, 255, 255)
			
			ActionButton.Padding = Instance.new("UIPadding", ActionButton.Frame)
			ActionButton.Padding.PaddingTop = UDim.new(0, 8)
			ActionButton.Padding.PaddingLeft = UDim.new(0, 12)
			ActionButton.Padding.PaddingBottom = UDim.new(0, 8)
			
			ActionButton.Corner = Instance.new("UICorner", ActionButton.Frame)
			ActionButton.Corner.CornerRadius = UDim.new(0, 5)
			
			ActionButton.Icon = Instance.new("ImageLabel", ActionButton.Frame)
			ActionButton.Icon.BorderSizePixel = 0
			ActionButton.Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ActionButton.Icon.ImageTransparency = 0.3
			ActionButton.Icon.AnchorPoint = Vector2.new(1, 0)
			ActionButton.Icon.Image = "rbxassetid://18824415379"
			ActionButton.Icon.Size = UDim2.new(0, 25, 0, 25)
			ActionButton.Icon.BackgroundTransparency = 1
			ActionButton.Icon.Name = "ButtonIcon"
			ActionButton.Icon.Position = UDim2.new(1, -8, 0, 2)
			
			ActionButton.Label = Instance.new("TextLabel", ActionButton.Frame)
			ActionButton.Label.BorderSizePixel = 0
			ActionButton.Label.TextXAlignment = Enum.TextXAlignment.Left
			ActionButton.Label.TextTransparency = 0.2
			ActionButton.Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ActionButton.Label.TextSize = 18
			ActionButton.Label.FontFace = Font.new("rbxassetid://11702779517", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
			ActionButton.Label.TextColor3 = Color3.fromRGB(255, 255, 255)
			ActionButton.Label.BackgroundTransparency = 1
			ActionButton.Label.Size = UDim2.new(0.85, 0, 1, 0)
			ActionButton.Label.Text = ButtonConfig.Label
			ActionButton.Label.Name = "ButtonLabel"
			
			function ActionButton:SetLabel(NewLabel)
				ActionButton.Label.Text = NewLabel
			end
			
			function ActionButton:SetFunction(NewFunction)
				ButtonConfig.ClickFunction = NewFunction
			end
			
			ActionButton.Frame.MouseEnter:Connect(function()
				ActionButton.IsHovered = true
				NovaUI:CreateAnimation(ActionButton.Icon, {ImageTransparency = 0})
				NovaUI:CreateAnimation(ActionButton.Label, {TextTransparency = 0})
				NovaUI:CreateAnimation(ActionButton.Border, {Transparency = 0.9})
			end)
			
			ActionButton.Frame.MouseLeave:Connect(function()
				ActionButton.IsHovered = false
				
				if not ActionButton.IsPressed then
					NovaUI:CreateAnimation(ActionButton.Icon, {ImageTransparency = 0.3})
					NovaUI:CreateAnimation(ActionButton.Label, {TextTransparency = 0.2})
					NovaUI:CreateAnimation(ActionButton.Border, {Transparency = 0.96})
				end
			end)
			
			ActionButton.Frame.InputBegan:Connect(function(Input, GPE)
				if GPE then return end
				
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and ActionButton.IsHovered then
					ActionButton.IsPressed = true
					NovaUI:CreateAnimation(ActionButton.Frame, {BackgroundColor3 = Color3.fromRGB(28, 28, 28)})
					NovaUI:CreateAnimation(ActionButton.Border, {Transparency = 0.9})
					ButtonConfig.ClickFunction()
				end
			end)
			
			ActionButton.Frame.InputEnded:Connect(function(Input, GPE)
				if GPE then return end
				
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					ActionButton.IsPressed = false
					
					if ActionButton.IsHovered then
						NovaUI:CreateAnimation(ActionButton.Frame, {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
						NovaUI:CreateAnimation(ActionButton.Icon, {ImageTransparency = 0})
						NovaUI:CreateAnimation(ActionButton.Label, {TextTransparency = 0})
						NovaUI:CreateAnimation(ActionButton.Border, {Transparency = 0.9})
					else
						NovaUI:CreateAnimation(ActionButton.Frame, {BackgroundColor3 = Color3.fromRGB(25, 25, 25)})
						NovaUI:CreateAnimation(ActionButton.Border, {Transparency = 0.96})
					end
				end
			end)
			
			return ActionButton
		end
		
		-- Additional UI elements (Slider, Toggle, Dropdown, Input) would follow similar pattern
		-- ... (implementation for other UI elements)
		
		return Section
	end
	
	-- Interface Control Functions
	function Interface:AdjustScale(ScaleValue)
		NovaUI:CreateAnimation(Interface.ScaleHandler, {Scale = ScaleValue})
	end
	
	function Interface:CloseInterface()
		NovaUI:CreateAnimation(Interface.ScaleHandler, {Scale = 0.8})
		wait(0.1)
		Interface.MainFrame:Destroy()
	end
	
	return Interface
end

return NovaUI
